import imaplib
import email
import re
from datetime import datetime
from email.header import decode_header
import requests
import spacy
from parser.models import AutoNews, UserNews

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
IMAP_SERVER = "imap.gmail.com"
nlp = spacy.load("en_core_web_sm")


def analyze_email_content(subject, sender, body, sent_at):
    """–ê–Ω–∞–ª–∏–∑ –ø–∏—Å—å–º–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å Django."""
    print(f"–¢–µ–º–∞: {subject}")
    print(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}")
    print(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {sent_at}")

    is_automated = False

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ sender_name –∏ sender_email
    sender_name, sender_email = extract_sender_info(sender)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ no-reply
    if sender_email and "no-reply" in sender_email.lower():
        print("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å no-reply –∞–¥—Ä–µ—Å–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ).")
        is_automated = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–æ unsubscribe
    if "unsubscribe" in body.lower():
        print("–ü–∏—Å—å–º–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ 'unsubscribe' (–≤–µ—Ä–æ—è—Ç–Ω–æ, —Ä–∞—Å—Å—ã–ª–∫–∞).")
        is_automated = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    automated_phrases = [
        "do not reply", "automated message", "click here",
        "manage your preferences", "update your settings"
    ]
    for phrase in automated_phrases:
        if phrase in body.lower():
            print(f"–ü–∏—Å—å–º–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —à–∞–±–ª–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É: '{phrase}' (–≤–µ—Ä–æ—è—Ç–Ω–æ, —Ä–∞—Å—Å—ã–ª–∫–∞).")
            is_automated = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ HTML
    if re.search(r"<html>|<body>|<div>", body, re.IGNORECASE):
        print("–ü–∏—Å—å–º–æ —Å–æ–¥–µ—Ä–∂–∏—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É (–≤–µ—Ä–æ—è—Ç–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ).")
        is_automated = True

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if is_automated:
        save_auto_news(sender_name, sender_email, body, sent_at)
    else:
        save_user_news(sender_name, sender_email, body, sent_at)

    print("=" * 50)


def extract_sender_info(sender):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ email –∏–∑ —Å—Ç—Ä–æ–∫–∏ 'From'."""
    match = re.match(r'(?:"?([^"]*)"?\s)?(?:<?([\w\.-]+@[\w\.-]+)>?)', sender)
    if match:
        sender_name = match.group(1) if match.group(1) else match.group(2)
        sender_email = match.group(2)
        return sender_name, sender_email
    return sender, sender


def parse_email_date(date_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Email –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç datetime."""
    try:
        return datetime.strptime(date_str, "%a, %d %b %Y %H:%M:%S %z")  # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö email
    except Exception:
        return None


def save_auto_news(sender_name, sender_email, content, sent_at):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ –≤ AutoNews."""
    news = AutoNews(sender_name=sender_name, sender_email=sender_email, content=content, sent_at=sent_at)
    news.save()
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ AutoNews")


def save_user_news(sender_name, sender_email, content, sent_at):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∏—Å—å–º–æ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ UserNews."""
    news = UserNews(sender_name=sender_name, sender_email=sender_email, content=content, sent_at=sent_at)
    news.save()
    print("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ UserNews")


def get_html_emails(user_email, user_password):
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Gmail –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞."""
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(user_email, user_password)

    # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ "–í—Ö–æ–¥—è—â–∏–µ"
    mail.select("inbox")

    # –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äì –≤—Å–µ)
    status, messages = mail.search(None, "ALL")
    email_ids = messages[0].split()

    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(email_ids)}")

    # –ß—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 –ø–∏—Å–µ–º
    for email_id in email_ids[-20:]:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞
        status, msg_data = mail.fetch(email_id, "(RFC822)")

        for response_part in msg_data:
            if isinstance(response_part, tuple):
                # –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
                msg = email.message_from_bytes(response_part[1])

                # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                subject, encoding = decode_header(msg["Subject"])[0]
                if isinstance(subject, bytes):
                    subject = subject.decode(encoding if encoding else "utf-8")
                sender = msg.get("From")

                # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
                date_str = msg["Date"]
                sent_at = parse_email_date(date_str)

                # –ï—Å–ª–∏ –ø–∏—Å—å–º–æ —Å–æ–¥–µ—Ä–∂–∏—Ç HTML
                body = ""
                if msg.is_multipart():
                    for part in msg.walk():
                        content_type = part.get_content_type()
                        content_disposition = str(part.get("Content-Disposition"))

                        # –ü–æ–ª—É—á–µ–Ω–∏–µ HTML –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø–∏—Å—å–º–∞
                        if content_type == "text/plain" and "attachment" not in content_disposition:
                            body = part.get_payload(decode=True).decode()
                            break
                        elif content_type == "text/html":
                            body = part.get_payload(decode=True).decode()
                            break
                else:
                    # –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –º—É–ª—å—Ç–∏—á–∞—Å—Ç–Ω–æ–µ
                    content_type = msg.get_content_type()
                    if content_type == "text/plain" or content_type == "text/html":
                        body = msg.get_payload(decode=True).decode()

                # –ê–Ω–∞–ª–∏–∑ –ø–∏—Å—å–º–∞
                analyze_email_content(subject, sender, body, sent_at)

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    mail.logout()


# üîó –í–ê–ñ–ù–û: –£–∫–∞–∂–∏—Ç–µ URL –≤–∞—à–µ–π Google –§–æ—Ä–º—ã (–∑–∞–º–µ–Ω–∏—Ç–µ!)
FORM_URL_USER = "https://docs.google.com/forms/d/e/1FAIpQLSfLwHTYqURZuf0PeyF65A6Je9zzlKZF2nhihCe_OLs2Ujls8g/formResponse"
FORM_URL_AUTO = "https://docs.google.com/forms/d/e/1FAIpQLSdw1tpeSzQ1cXf9GzUV6WXhluHLH67b6IW35739ZKgvTTyqOw/formResponse"

# üìù –£–∫–∞–∂–∏—Ç–µ `entry.XYZ` –∏–∑ –≤–∞—à–µ–π Google –§–æ—Ä–º—ã
FORM_FIELDS = {
    "sent_at": "entry.1254920258",
    "sender_name": "entry.831907760",
    "sender_email": "entry.2137566045",
    "content": "entry.582710391"
}

def send_to_google_forms(sent_at, sender_name, sender_email, content, auto_gen=True):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google Forms"""
    data = {
        FORM_FIELDS["sent_at"]: sent_at,
        FORM_FIELDS["sender_name"]: sender_name,
        FORM_FIELDS["sender_email"]: sender_email,
        FORM_FIELDS["content"]: content
    }
    if auto_gen is True:
        response = requests.post(FORM_URL_AUTO, data=data)
    elif auto_gen is False:
        response = requests.post(FORM_URL_USER, data=data)

    if response.status_code == 200:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google Sheets —á–µ—Ä–µ–∑ Google Forms")
    else:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {response.status_code}")

def export_news_to_google_forms():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –≤ Google Forms"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã
    auto_news = AutoNews.objects.all().values_list("sent_at", "sender_name", "sender_email", "content")
    user_news = UserNews.objects.all().values_list("sent_at", "sender_name", "sender_email", "content")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å
    for news in auto_news:
        send_to_google_forms(*news, auto_gen=True)
    for news in user_news:
        send_to_google_forms(*news, auto_gen=False)

    print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google Forms!")


