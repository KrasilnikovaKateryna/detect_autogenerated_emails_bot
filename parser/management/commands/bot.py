import threading
import traceback

from django.core.management import BaseCommand

from parser.bot_instance import bot
from parser.management.commands.parser_emails import get_emails,export_mails_to_google_forms

is_running = False  # –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
user_data = {}  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@bot.message_handler(commands=["start"])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Gmail.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /parse_emails –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")


@bot.message_handler(commands=["parse_emails"])
def request_email(message):
    """–®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global is_running

    if is_running:
        bot.reply_to(message, "‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    bot.send_message(message.chat.id, "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É Gmail:")
    bot.register_next_step_handler(message, request_password)

def request_password(message):
    """–®–∞–≥ 2: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data[message.chat.id] = {"email": message.text}
    bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Google App Password):")
    bot.register_next_step_handler(message, start_parsing)

def start_parsing(message):
    """–®–∞–≥ 3: –ü–µ—Ä–µ–¥–∞–µ–º email –∏ –ø–∞—Ä–æ–ª—å –≤ get_emails()"""
    global is_running
    chat_id = message.chat.id

    if is_running:
        bot.reply_to(message, "‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    is_running = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ "–±–æ—Ç –∑–∞–Ω—è—Ç"

    user_data[chat_id]["password"] = message.text
    email = user_data[chat_id]["email"]
    password = user_data[chat_id]["password"]

    bot.send_message(chat_id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")

    thread = threading.Thread(target=run_parsing, args=(chat_id, email, password))
    thread.start()

def run_parsing(chat_id, email, password):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global is_running

    try:
        get_emails(email, password, chat_id)  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º `chat_id`
        bot.send_message(chat_id, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.")
    except Exception as e:
        bot.send_message(chat_id, f"‚ö† –û—à–∏–±–∫–∞: {str(e)}")
        traceback.print_exc()
    finally:
        is_running = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        user_data.pop(chat_id, None)  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

class Command(BaseCommand):
    def handle(self, *args, **options):
        bot.polling(none_stop=True)